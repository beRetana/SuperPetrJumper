//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/PetrControllers.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PetrControllers: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PetrControllers()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PetrControllers"",
    ""maps"": [
        {
            ""name"": ""Petr"",
            ""id"": ""b254a143-91a0-4a4c-b333-ff7297a94467"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""7a756589-eac7-404b-abf9-79a1ee2b3a66"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""84e8e247-ff19-426e-abbf-2040bc0365cf"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""70d83b74-2063-4877-b535-f8c0ba7502cb"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ddba030b-6f9f-427f-ae97-831778f44d23"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""02942b37-a704-4c47-a5fd-e9eaa34b625c"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Petr
        m_Petr = asset.FindActionMap("Petr", throwIfNotFound: true);
        m_Petr_Jump = m_Petr.FindAction("Jump", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Petr
    private readonly InputActionMap m_Petr;
    private List<IPetrActions> m_PetrActionsCallbackInterfaces = new List<IPetrActions>();
    private readonly InputAction m_Petr_Jump;
    public struct PetrActions
    {
        private @PetrControllers m_Wrapper;
        public PetrActions(@PetrControllers wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_Petr_Jump;
        public InputActionMap Get() { return m_Wrapper.m_Petr; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PetrActions set) { return set.Get(); }
        public void AddCallbacks(IPetrActions instance)
        {
            if (instance == null || m_Wrapper.m_PetrActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PetrActionsCallbackInterfaces.Add(instance);
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
        }

        private void UnregisterCallbacks(IPetrActions instance)
        {
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
        }

        public void RemoveCallbacks(IPetrActions instance)
        {
            if (m_Wrapper.m_PetrActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPetrActions instance)
        {
            foreach (var item in m_Wrapper.m_PetrActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PetrActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PetrActions @Petr => new PetrActions(this);
    public interface IPetrActions
    {
        void OnJump(InputAction.CallbackContext context);
    }
}
